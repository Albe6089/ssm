name: CI/CD Pipeline
on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1

        # - name: AWS SSM Send-Command
        # uses: peterkimzz/aws-ssm-send-command@master
        #   id: ssm

        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: send command
        run: |
          aws ssm send-command  --instance-ids "i-02ad1169a37544dc1"  --document-name "AWS-RunShellScript" --comment "Run shell script on Bastion host" --parameters commands="cp filename filename.bkp" --output text --query "Command.CommandId"
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format#
      - name: Terraform Format
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      # - name: Run playbook
      #   uses: dawidd6/action-ansible-playbook@v2
      #   with:
      #     playbook: user_add.yml
      #     directory: ./
      #     inventory: |
      #       [bastion]
      #       # bastion_host ansible_host=10.0.3.253
      #       # ansible-playbook -i default-bastion-host-my-nlb-fa15a5656e269012.elb.us-east-1.amazonaws.com, user_add.yml
      #       ansible-playbook user_add.yml -i inventory
# - name: install aws-cli
#   hosts: all
#   gather_facts: false
#   vars:
#     ansible_connection: aws_ssm
#     ansible_aws_ssm_bucket_name: nameofthebucket
#     ansible_aws_ssm_region: us-east-1
#   tasks:
#   - name: aws-cli
#     raw: yum install -y awscli
#     tags: aws-cli

name: CI/CD Pipeline
on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1

        # - name: AWS SSM Send-Command
        # uses: peterkimzz/aws-ssm-send-command@master
        #   id: ssm

        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # - name: ssm send command
      #   run: |
      #     aws ssm send-command  --instance-ids "i-0dd34dd1de5b92d54"  --document-name "AWS-RunShellScript" --comment "Copy the user_add from s3 to Bastion host" --parameters commands="aws s3 cp s3://upload-bucket-for-ssm/user_add.yml /tmp/user_add.yml" --output text --query "Command.CommandId"
      #     aws ssm send-command --instance-ids "i-0dd34dd1de5b92d54" --document-name "AWS-RunShellScript" --comment "Ansible add the users to the bastion host" --parameters commands="sudo ansible-playbook /tmp/user_add.yml" --output text --query "Command.CommandId"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format#
      - name: Terraform Format
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: ssm send command
        run: |
          aws ssm send-command  --instance-ids "i-05f59bedfa0ed1c1e"  --document-name "AWS-RunShellScript" --comment "Copy the user_add from s3 to Bastion host" --parameters commands="aws s3 cp s3://upload-bucket-for-ssm/user_add.yml /tmp/user_add.yml" --output text --query "Command.CommandId"
          aws ssm send-command --instance-ids "i-05f59bedfa0ed1c1e" --document-name "AWS-RunShellScript" --comment "Ansible add the users to the bastion host" --parameters commands="sudo ansible-playbook /tmp/user_add.yml" --output text --query "Command.CommandId"
